# -*- coding: utf-8 -*-
"""funnel-plotting.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v_Xwq2UNgzQKEV39J5W_ITnAihMmmGK2

## Funnel Analysis
[video walkthrough](https://www.loom.com/share/973078f6535b411496824e8219c2c437)
"""

# !pip install gspread pandas gspread_dataframe

from google.colab import auth
auth.authenticate_user()

#@title Read Data
import gspread
import pandas as pd
from gspread_dataframe import get_as_dataframe

# Authenticate and create a client to access Google Sheets
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google.auth import default

# Get Google Sheets API client
creds, _ = default()
gc = gspread.authorize(creds)

sheet_name = 'Funnel Analytics (2024 1/1-11/20)'
workbook = gc.open(sheet_name)

worksheet = workbook.worksheet("spend")
spend = get_as_dataframe(worksheet)

worksheet = workbook.worksheet("users")
users = get_as_dataframe(worksheet)

worksheet = workbook.worksheet("meta-ads-per-day")
ads = get_as_dataframe(worksheet)

for df in [spend, users, ads]:
  df.dropna(how='all', inplace=True)
  df.dropna(axis=1, how='all', inplace=True)

#@title User Funnel Data prep
users_cp = (
    users.assign(
        has_business=users['first_business'].notnull(),
        has_email=users['email'].notnull(),
        has_name=users['given_name'].notnull(),
        has_subscription=((users['subscription.subscription_id'].notna()) &
                          (users['subscription.is_appsumo'] == False)),
        created_at=pd.to_datetime(users['created_at'].apply(lambda x: x.split()[0]))
    )
    .set_index('created_at')
)
users_cp = users_cp[users_cp.index > '2024-01-01']

#@title Meta Ads Data Prep
ads_by_day = (
    ads
    .rename(columns={'Day': 'date'})
    .assign(date=lambda df: pd.to_datetime(df['date']))
    .set_index('date')
    # .resample('D')
    # .apply(lambda x: pd.Series({
    #     'CAC': (x['Cost per purchase'] * x['Purchases']).sum() / x['Purchases'].sum(),
    #     'CPC': (x['CPC (cost per link click)'] * x['Link clicks']).sum() / x['Link clicks'].sum(),
    #     'Ad Spend': x['Amount spent (USD)'].sum(),
    #     'Clicks': x['Link clicks'].mean(),
    #     'Purchases': x['Purchases'].sum(),
    # }))
)

spend_cp = (
  spend
  .assign(date=lambda df: pd.to_datetime(spend.charge_date))
  .set_index('date')
  .resample('D').agg({
    'initial_spend': 'mean',
    'total_spend': 'mean',
  }))

merged_data = spend_cp.join(ads_by_day, how='inner')

#@title Get data to plot
import plotly.express as px

grouping_period = "daily" #@param ["daily", "weekly", "monthly"]
grouping_map = {
    "daily": "D",
    "weekly": "W-Mon",
    "monthly": "M",
}

user_data_to_plot = (users_cp
  .resample(grouping_map[grouping_period]).agg({
      # 'index': 'count',
      'has_business': 'mean',
      'has_post': 'mean',
      'has_email': 'mean',
      'has_name': 'mean',
      'has_subscription': 'mean'
  })
  .assign(pct_subscribed_x10=lambda df: df['has_subscription'] * 10)
  .rename(columns={
      'created_at': 'created',
      'has_business': 'pct_has_business',
      'has_post': 'pct_has_post',
      'has_email': 'pct_has_email',
      'has_name': 'pct_has_name',
      'has_subscription': 'pct_has_subscription'
  })[['pct_has_business', 'pct_has_post', 'pct_has_email', 'pct_has_name', 'pct_subscribed_x10']]
)


usd_data_to_plot = (
   merged_data
     .resample(grouping_map[grouping_period])
     .apply(lambda x: pd.Series({
        'Initial Spend': x['initial_spend'].mean(),
        'Customer Total Spend': x['total_spend'].mean(),
        'CAC': (x['Cost per purchase'] * x['Purchases']).sum() / x['Purchases'].sum(),
        'CPC': (x['CPC (cost per link click)'] * x['Link clicks']).sum() / x['Link clicks'].sum(),
        'Ad Spend': x['Amount spent (USD)'].sum(),
     }))
)

count_data_to_plot = (
   merged_data
     .resample(grouping_map[grouping_period])
     .apply(lambda x: pd.Series({
         'Purchases': x['Purchases'].sum(),
         'Clicks': x['Link clicks'].mean(),
     }))
)

import plotly.express as px

# Figure 1: Users Created
users_created_fig = px.line(
    (users_cp
      .resample(grouping_map[grouping_period])
      .size().rename('Users Created')),
    labels={"index": "Date", "value": "Count"},
    title="Users Created",
    height=400,
)
users_created_fig.update_xaxes(title_text="")
users_created_fig.show()

# Figure 2: User Funnel
user_funnel_fig = px.line(
    user_data_to_plot,
    labels={"index": "Date", "value": "Percentage"},
    title="User Funnel",
    height=400,
)
user_funnel_fig.update_xaxes(title_text="")
user_funnel_fig.show()

# Figure 3: CAC vs Spend
cac_spend_fig = px.line(
    usd_data_to_plot,
    labels={'value': 'USD', 'date': 'Date'},
    title="CAC vs Spend",
    height=400,
)
cac_spend_fig.update_xaxes(title_text="")
cac_spend_fig.show()

# Figure 4: Count Data
count_fig = px.line(
    count_data_to_plot,
    labels={'value': 'Count', 'date': 'Date'},
    title="Ad Count Data",
    height=400,
)
count_fig.update_xaxes(title_text="")
count_fig.show()

# @title Alternative way to plot with subplots


# from plotly.subplots import make_subplots

# # Create subplots with shared x-axis
# fig = make_subplots(
#     rows=4,
#     cols=1,
#     shared_xaxes=True,
#     vertical_spacing=0.1,
#     subplot_titles=("Users Created", "User Funnel", "Purchase Data", "Count Data")
# )


# user_funnel_fig = px.line(
#     (users
#       .resample(grouping_map[grouping_period])
#       .size().rename('Users Created')),
#     labels={"index": "Date", "value": "Percentage"}
# )
# for trace in user_funnel_fig.data:
#     fig.add_trace(trace, row=1, col=1)

# user_funnel_fig = px.line(
#     user_data_to_plot,
#     labels={"index": "Date", "value": "Percentage"}
# )
# for trace in user_funnel_fig.data:
#     fig.add_trace(trace, row=2, col=1)


# cac_spend_fig = px.line(
#     usd_data_to_plot,
#     labels={'value': 'USD', 'date': 'Date'}
# )
# for trace in cac_spend_fig.data:
#     fig.add_trace(trace, row=3, col=1)

# count_fig = px.line(
#     count_data_to_plot,
#     labels={'value': 'USD', 'date': 'Date'}
# )
# for trace in count_fig.data:
#     fig.add_trace(trace, row=4, col=1)


# fig.update_layout(
#     height=800,
#     yaxis1_title="Count",
#     yaxis2_title="Percent",
#     yaxis3_title="USD",
#     yaxis4_title="Count",
#     template="plotly_white",  # Clean aesthetic
# )

# fig.show()

pcts = (
    (users_cp[users_cp.index == '2024-11-18'].agg({
    # 'date': 'count',
    'has_email': 'mean',
    'has_name': 'mean',
    'has_business': 'mean',
    'has_post': 'mean',
    'has_subscription': 'mean',
    }) * 100)
    .astype(int)
).rename('pct')

counts = (
    (users_cp[users_cp.index == '2024-11-18'].agg({
    'date': 'count',
    'has_email': 'sum',
    'has_name': 'sum',
    'has_business': 'sum',
    'has_post': 'sum',
    'has_subscription': 'sum',
    }))
    .astype(int)
).rename('count')

pd.concat([pcts, counts], axis=1)

users_cp[(users_cp.index == '2024-11-18') & (users_cp.has_email)].email.sort_values()

# kizmandy1@gmail.com